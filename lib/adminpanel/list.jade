.neutron-list
    h2= this.props.label||this.props.id
    if this.state.item
        .form-horizontal
            each column,name in this.props.columns
                .form-group
                    label.col-sm-2= column.label||name
                    .col-sm-10
                        - var Field = require(this.props.types[column.type].editComponentPath);
                        Field(value=(this.state.item[name]||column.defaultValue) onChange=this.onItemValueChange(name) ref="field."+name column=column)&attributes(this.props)
        .btn-toolbar.pull-right
            button.btn.btn-default(onClick=this.cancel) Cancel
            button.btn.btn-primary(onClick=this.save) Save
    else
        .btn-toolbar
            .searchgroup
                input.form-control.searchbox(type="text" ref="searchbox" onKeyDown=this.checkEnter)
                button.btn.btn-default(onClick=this.search) Search
            button.btn.btn-default Filter
            button.btn.btn-primary(onClick=this.create) Create
        div(style="position:relative")
            div(style="position:absolute;right:0px;top:3px;z-index:200;")
                DropdownButton(bsSize="small" title=Glyphicon({glyph:"eye-open"}))
                    each column,name in this.props.columns
                        MenuItem(eventKey=name href="javascript:")
                            input(type="checkbox",checked=column.visible onChange=this.toggleColumn(column))
                            = " "+(column.label||name)
        table.table.table-striped
            thead
                tr
                    - var visibleColumns = this.getVisibleColumns();
                    each column,i in visibleColumns
                        th
                            = this.props.columns[column].label||column
                    th
            tbody
                each item in this.state.data
                    tr
                        each column,name in this.props.columns
                            if column.visible
                                td(onClick=this.edit(item))
                                    = require(this.props.types[column.type].viewComponentPath)({value:item[name]})
                        td
                            button.btn.btn-default.btn-xs.pull-right(onClick=this.delete(item))
                                i.glyphicon.glyphicon-trash
main.
    var Glyphicon = require("react-bootstrap/Glyphicon");
    var MenuItem = require("react-bootstrap/MenuItem");
    var DropdownButton = require("react-bootstrap/DropdownButton");
    
    exports.getInitialState = function(){
        return {
            data:[]
        }
    }
    
    exports.componentDidMount = function(){
        this.update();
    }
    
    exports.toggleColumn = function(col){
        return function(){
            col.visible = !col.visible;
            this.forceUpdate();
        }.bind(this);        
    }
    
    exports.getVisibleColumns = function(){
        var visible = [];
        for(var name in this.props.columns){
            var column = this.props.columns[name];
            if(column.visible) visible.push(name);
        }
        if(visible.length == 0) visible.push("")
        return visible;
    }
    
    exports.search = function(){
        this.state.search = this.refs.searchbox.state.value;
        if(!this.state.search) delete this.state.search;
        this.update();
    }
    
    exports.checkEnter = function(e){
        if(e.keyCode == 13) this.search();
    }
    
    exports.update = function(){
        var query = {};
        if(this.state.search) query.search = this.state.search;
        
        var req = new XMLHttpRequest()
        req.open("POST","./"+this.props.id+"/list");
        req.setRequestHeader("Content-Type","application/json");
        req.onreadystatechange = function(){
            if(req.readyState == 4){
                this.state.data = JSON.parse(req.responseText);
                this.forceUpdate();
            }
        }.bind(this)
        req.send(JSON.stringify(query));
    }
    
    exports.create = function(){
        this.state.item = {};
        this.forceUpdate();
    }
    
    exports.edit = function(item){
        return function(e){
            this.state.item = JSON.parse(JSON.stringify(item));
            this.forceUpdate();
        }.bind(this);        
    }
    
    exports.onItemValueChange = function(name){
        return function(){
            this.state.item[name] = this.refs["field."+name].props.value;
        }.bind(this);
    }
    
    exports.cancel = function(){
        delete this.state.item;
        this.forceUpdate();
    }
    
    exports.save = function(){
        var req = new XMLHttpRequest()
        req.open("POST","./"+this.props.id+"/update");
        req.setRequestHeader("Content-Type","application/json");
        req.onreadystatechange = function(){
            if(req.readyState == 4){
                delete this.state.item;
                this.update();
            }
        }.bind(this)
        req.send(JSON.stringify(this.state.item));
    }
    
    exports.delete = function(item){
        return function(){
            if(!confirm("Are you sure?")) return;
            var req = new XMLHttpRequest()
            req.open("GET","./"+this.props.id+"/delete/"+item._id);
            req.setRequestHeader("Content-Type","application/json");
            req.onreadystatechange = function(){
                if(req.readyState == 4){
                    this.update();
                }
            }.bind(this)
            req.send();
        }.bind(this);
    }
