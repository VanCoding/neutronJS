.filemanager
    .modal-header
        .btn-toolbar
            button.btn.btn-default(onClick=this.setDirectory)
                i.glyphicon.glyphicon-home
            each item in this.props.tree
                button.btn.btn-default(data-directory=item._id, onClick=this.setDirectory)= item.filename
            button.btn.btn-default.pull-right(onClick=this.confirmDelete) Delete
            button.btn.btn-default.pull-right(onClick=this.createDirectory) New Directory
            button.btn.btn-default.pull-right() Upload Files
    .modal-body(onDragEnter=this.dragenter, onDragOver=this.dragover, onDragLeave=this.dragleave, onDrop=this.drop)
        each file in this.props.files
            - __add(this.createItem(file));
    if this.props.mode == "pick"
        .modal-footer
            button.btn.btn-default(onClick=this.cancelFilePick) Cancel
            button.btn.btn-primary(onClick=this.finishFilePick className=this.props.getSelectedItem()?"":"disabled") OK
    if this.props.showDeleteDialog
        Modal
            .modal-header(style="position:relative")
                button.close(onClick=this.cancelDelete)
                    span Ã—
                h4 Delete Items
            .modal-body Do you really want to delete those items?
            .modal-footer
                button.btn.btn-default(onClick=this.cancelDelete) Cancel
                button.btn.btn-primary(onClick=this.delete) Delete

main.
    var Modal = require("../modal/component.jade");
    exports.getInitialState = function(){
        this.props.directory = null;
        this.props.tree = [];
        return {};
    }

    exports.dragenter = function(e){
        console.log("You dragged over!");
        e.stopPropagation();
        e.preventDefault();
    }
    exports.dragover = function(e){
        e.preventDefault();
    }
    exports.dragleave = function(e){
        console.log("You leaved!");
        e.stopPropagation();
        e.preventDefault();
    }
    exports.drop = function(e){
        e.preventDefault();

        var files = Array.prototype.slice.call(e.dataTransfer.files);
        var loaded = 0;
        var self = this;

        for(var i = 0; i < files.length; i++){
            (function(i){
                var reader = new FileReader();
                reader.onloadend = function(){
                    console.log(reader.result);
                    var entry = {filename:files[i].name,contentType:files[i].type,data:reader.result,progress:"0%"}

                    self.props.files.push(entry);

                    var req = new XMLHttpRequest();
                    req.upload.onprogress = function(e){
                        entry.progress = e.total/e.loaded*100+"%";
                        self.forceUpdate();
                    }
                    req.open("PUT",self.props.neutronPath+self.props.id+"/"+(self.props.directory||"root")+"/"+files[i].name);
                    req.setRequestHeader("Content-Type",files[i].type);
                    req.onload = function(){
                        var result = JSON.parse(req.responseText);
                        entry._id = result._id;
                        delete entry.data;
                        delete entry.progress;
                        self.forceUpdate();
                    }

                    req.send(files[i]);

                    self.forceUpdate();
                }
                reader.readAsDataURL(files[i]);
            })(i);
        }
    }

    exports.createItem = function(item){
        var self = this;
        var icons = {
            "text/directory":"fa-folder-o",
            "application/pdf":"fa-file-pdf-o"
        };

        var attributes = {className:"item",style:{}};
        var children = [];

        if(item.selected) attributes.className += " selected";

        if(["image/png","image/jpeg"].indexOf(item.contentType) >= 0){
            attributes.style["background-image"] = "url("+(item._id?(this.props.neutronPath+this.props.id+"/"+item._id):item.data)+")";
        }else{
            children.push(React.DOM.span({className:"fa "+(icons[item.contentType]||"fa-file-o")}));
        }

        attributes.onClick = this.clickItem(item);        

        if(item.progress){
            children.push(React.DOM.div({className:"progressbar"},React.DOM.div({className:"progressbarstatus",style:{width:item.progress}})));
        }
        children.push(React.DOM.div({},item.filename));

        return React.DOM.div(attributes,children);
    }

    exports.clickItem = function(file){
        var self = this;
        return function(e){
        
            if(file.selected && file.contentType == "text/directory" && file.lastClick+300 > new Date().getTime()){
                self.props.directory = file._id;
                self.props.files = null;
                self.props.tree.push(file);
            }else{        
                file.selected = !file.selected;
                file.lastClick = new Date().getTime();
                if(!e.nativeEvent.ctrlKey){
                    for(var i = 0; i < self.props.files.length; i++){
                        if(self.props.files[i] == file) continue;
                        delete self.props.files[i].selected;
                    }
                }
            }
            self.forceUpdate();
        }
    }

    exports.setDirectory = function(e){
        this.props.directory = e.target.getAttribute("data-directory")||null;
        for(var i = this.props.tree.length-1; i >= 0 && this.props.tree[i]._id != this.props.directory; i--){
            this.props.tree.splice(i,1);
        }
        this.props.files = null;
        this.forceUpdate();
    }

    exports.update = function(){
        if(!this.props.files && typeof window == "object"){
            var self = this;
            var req = new XMLHttpRequest();
            req.open("GET",this.props.neutronPath+self.props.id+"/"+(self.props.directory||""));
            req.onload = function(){
                self.props.files = JSON.parse(req.responseText);
                self.sortItems();
                self.forceUpdate();
            }
            req.send();
        }
    }

    exports.componentWillMount = exports.update;
    exports.componentWillUpdate = exports.update;

    exports.confirmDelete = function(){
        this.props.showDeleteDialog = true;
        this.forceUpdate();
    }

    exports.cancelDelete = function(){
        this.props.showDeleteDialog = false;
        this.forceUpdate();
    }

    exports.delete = function(){
        var self = this;
        this.props.showDeleteDialog = false;
        for(var i = 0; i < this.props.files.length; i++){
            var file = this.props.files[i];
            if(file.selected){
                var req = new XMLHttpRequest();
                req.open("DELETE",this.props.neutronPath+self.props.id+"/"+file._id);
                req.onload = function(){
                    self.props.files.splice(self.props.files.indexOf(file),1);
                    self.forceUpdate();
                }
                req.send();
                return;
            }
        }
        if(this.props.directory){
            var req = new XMLHttpRequest();
            req.open("DELETE",this.props.neutronPath+this.props.id+"/"+this.props.directory);
            req.onload = function(){
                self.props.tree.splice(self.props.tree.length-1,1);
                self.props.files = null;
                self.props.directory = self.props.tree.length?self.props.tree[self.props.tree.length-1]._id:null;
                self.forceUpdate();
            }
            req.send();
        }
    }

    exports.sortItems = function(){
        this.props.files.sort(function(a,b){
            if(a.contentType=="text/directory"){
                if(b.contentType!="text/directory") return -1;
            }else if(b.contentType=="text/directory"){
                return 1;
            }
            return a.filename.localeCompare(b.filename);

        });
    }

    exports.createDirectory = function(){
        var self = this;
        var req = new XMLHttpRequest();
        req.open("PUT",this.props.neutronPath+this.props.id+"/"+(self.props.directory||"root")+"/Neuer Ordner");
        req.setRequestHeader("Content-Type","text/directory");
        req.onload = function(){
            self.props.files.push(JSON.parse(req.responseText));
            self.sortItems();
            self.forceUpdate();
        }
        req.send();
    }

    exports.displayShadow = function(){
        return true;
    }
    
    exports.getSelectedItem = function(){
        for(var i = 0; i < this.props.files.length; i++){
            if(this.props.files[i].selected) return this.props.files[i];
        }
    }
    
    exports.finishFilePick = function(){
        var item = this.getSelectedItem();
        if(item) this.props.onFilePick(item);
    }
    exports.cancelFilePick = function(){
        this.props.onCancel();
    }
